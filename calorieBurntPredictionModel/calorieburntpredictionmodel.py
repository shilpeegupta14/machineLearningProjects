# -*- coding: utf-8 -*-
"""calorieBurntPredictionModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJy634aU2WWF50y8h3OROBLaK-_BHxOy

importing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
#regressor used for printing values
#classifier is used to classify whether yes or no(eg diabetes classfication)

"""data collection and preprocessing

"""

calories=pd.read_csv('/content/calories.csv')
calories.head() #print first 5 values

exercise_data=pd.read_csv('/content/exercise.csv')
exercise_data.head()

"""combining dataframes"""

calories_data=pd.concat([exercise_data, calories['Calories']],axis=1)
calories_data.head()

calories_data.shape

calories_data.info

calories_data.isnull().sum() #shows no data is missing

calories_data.describe()

sns.set #provides theme of plots

sns.countplot(calories_data['Gender']) #countplot used for categorical column

sns.distplot(calories_data['Age'])

sns.distplot(calories_data['Height'])

sns.distplot(calories_data['Weight'])

"""finding correlation of dataset

1)positive correlation-eg:duration increases then calories also increases i.e if 1 feature increases, the dependent feature also increases.

2)negative correlation-if 1 feature increases, then other feature decreases.
"""

correlation=calories_data.corr();

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""converting text data to numerical values"""

calories_data.replace({"Gender":{'male':0,'female':1}}, inplace=True) #inplace is used to retain changes

calories_data.head()

"""specifying target and features"""

x=calories_data.drop(columns=['User_ID','Calories']) #x represents features
y=calories_data['Calories'] #y represents target

print(x)

print(y)

"""splitting training and testing data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)
print(x.shape,x_train.shape,x_test.shape)

"""model training

xgboost regressor
"""

model = XGBRegressor()

model.fit(x_train, y_train)

"""evaluation

prediction of test data
"""

test_data_predict=model.predict(x_test)
print(test_data_predict)

accuracy=metrics.r2_score(y_test,test_data_predict)
print(accuracy)

"""mean absolute error"""

mae=metrics.mean_absolute_error(y_test,test_data_predict)
print("mean absolute error = ", mae)